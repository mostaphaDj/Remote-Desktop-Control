unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls,Jpeg, IdAntiFreezeBase, IdAntiFreeze,
  IdBaseComponent, IdComponent, IdUDPBase, IdUDPClient, IdUDPServer,IdSocketHandle,IdGlobal,IdContext,
  IdCustomTCPServer, IdTCPServer;

type
  TForm1 = class(TForm)
    IdUDPClientScreenShots: TIdUDPClient;
    UDPAntiFreeze: TIdAntiFreeze;
    IdUDPServerControl: TIdUDPServer;
    IdTCPServerOptiorus: TIdTCPServer;
    procedure IdUDPServerControlUDPRead(AThread: TIdUDPListenerThread;
      AData: TBytes; ABinding: TIdSocketHandle);
    procedure IdTCPServerOptiorusDisconnect(AContext: TIdContext);
    procedure IdTCPServerOptiorusConnect(AContext: TIdContext);
    procedure IdTCPServerOptiorusExecute(AContext: TIdContext);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  Context: TIdContext;

Type
  TOptions=packed record
    LocalHost:string;
    CompressionQuality:TJPEGQualityRange;
    GrayScale,
    ProgressiveEncoding:Boolean;
    Speed:1..1000;
  end;
Var
  OptionsRecord:TOptions;

implementation

uses ScreenShots_U;

{$R *.dfm}


procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
ThreadScreenShots.Free;
IdUDPServerControl.Active:=False;
IdTCPServerOptiorus.Active:=False;
end;

procedure TForm1.IdTCPServerOptiorusConnect(AContext: TIdContext);
Var
  Data:TBytes;
begin
  Context:=AContext;
  AContext.Connection.IOHandler.ReadBytes(Data,SizeOf(OptionsRecord));
  BytesToRaw(Data,OptionsRecord,SizeOf(OptionsRecord));
  IdUDPClientScreenShots.Host:=OptionsRecord.LocalHost;
  IdUDPServerControl.Active:=True;
  ThreadScreenShots:=TThreadScreenShots.Create(False);
end;

procedure TForm1.IdTCPServerOptiorusDisconnect(AContext: TIdContext);
begin
  IdUDPServerControl.Active:=False;
  ThreadScreenShots.Free;
end;

procedure TForm1.IdTCPServerOptiorusExecute(AContext: TIdContext);
Var
  Data:TBytes;
begin
  AContext.Connection.IOHandler.ReadBytes(Data,SizeOf(OptionsRecord));
  BytesToRaw(Data,OptionsRecord,SizeOf(OptionsRecord));
end;

procedure TForm1.IdUDPServerControlUDPRead(AThread: TIdUDPListenerThread;
  AData: TBytes; ABinding: TIdSocketHandle);
var  StrCommand:string;
     PosX,PosY,PosButton:Word;
     CursorPos : TPoint;
     StrButton:string;
     Key:Word;
begin
 StrCommand :=BytesToString(AData);
 if Pos ('MOUSE', strCommand) = 1 then
 begin
    PosX:=Pos('X=',StrCommand)+2;
    PosY:=Pos('Y=',StrCommand)+2;
    PosButton:=Pos('Button=',StrCommand)+7;
    CursorPos.X:=StrToInt(Copy(StrCommand,PosX,(PosY-2)-PosX));
    CursorPos.Y:=StrToInt(Copy(StrCommand,PosY,(PosButton-7)-(PosY)));
    StrButton:=Copy(StrCommand,PosButton,Length(StrCommand));
    if StrButton='Mouve' then
    begin
       SetCursorPos(CursorPos.X,CursorPos.Y);
    end
    else
    if StrButton='LeftDown'then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_LEFTDOWN,CursorPos.X, CursorPos.Y, 0, 0);
    end
    else
    if StrButton='RightDown' then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_RIGHTDOWN,CursorPos.X, CursorPos.Y, 0, 0)
    end
    else
    if StrButton='MiddleDown' then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_MIDDLEDOWN,CursorPos.X, CursorPos.Y, 0, 0);
    end
    else
    if StrButton='LeftUp'then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_LEFTUP,CursorPos.X, CursorPos.Y, 0, 0);
    end
    else
    if StrButton='RightUp' then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_RIGHTUP,CursorPos.X, CursorPos.Y, 0, 0);
    end
    else
    if StrButton='MiddleUp' then
    begin
      SetCursorPos(CursorPos.X,CursorPos.Y);
      Mouse_Event(MOUSEEVENTF_MIDDLEUP,CursorPos.X, CursorPos.Y, 0, 0);
    end;
  end
  else
  if Pos ('Key', StrCommand) = 1 then
  begin
    Key:=StrToInt(Copy(StrCommand,6,Length(StrCommand)));
    if Pos ('Dn'{Down}, StrCommand) = 4 then
    begin
      Keybd_event(Key, 0,0{KEYEVENTF_KEYDown}, 0);
    end
    else
    if Pos ('Up', StrCommand)=8 then
    begin
      Keybd_event(Key, 0, KEYEVENTF_KEYUP, 0);
    end
  end;
//    else if Pos ('DOUBL', strCommand) = 1 then
//       begin
//             SetCursorPos(CursorPos.X,CursorPos.Y);
//             Mouse_Event(MOUSEEVENTF_ABSOLUTE or
//                 MOUSEEVENTF_LEFTDOWN,CursorPos.X, CursorPos.Y, 0, 0);
//             Mouse_Event(MOUSEEVENTF_ABSOLUTE or
//                 MOUSEEVENTF_LEFTUP,CursorPos.X, CursorPos.Y, 0, 0);
//             Mouse_Event(MOUSEEVENTF_ABSOLUTE or
//                 MOUSEEVENTF_LEFTDOWN,CursorPos.X, CursorPos.Y, 0, 0);
//             Mouse_Event(MOUSEEVENTF_ABSOLUTE or
//                 MOUSEEVENTF_LEFTUP,CursorPos.X, CursorPos.Y, 0, 0);
//       end
//    else
//       begin
//          try
//            StrButton:=strCommand;
//            if s='VK_TAB' then begin b:=VK_TAB;SimulateKeystroke(b,0) end
//            else if s='VK_ESCAPE' then begin b:=VK_ESCAPE;SimulateKeystroke(b,0) end
//            else if s='VK_CAPITAL' then begin  b:=VK_CAPITAL;SimulateKeystroke(b,0) end
//            else if s='VK_HOME' then begin b:=VK_HOME;SimulateKeystroke(b,0) end
//            else if s='VK_END' then begin b:=VK_END;SimulateKeystroke(b,0) end
//            else if s='VK_INSERT' then begin b:=VK_INSERT;SimulateKeystroke(b,0) end
//            else if s='VK_DELETE' then begin b:=VK_DELETE;SimulateKeystroke(b,0) end
//            else if s='VK_SNAPSHOT' then begin b:=VK_SNAPSHOT;SimulateKeystroke(b,0) end
//            else if s='VK_NUMLOCK' then begin b:=VK_NUMLOCK;SimulateKeystroke(b,0) end
//            else if s='VK_UP' then begin b:=VK_UP;SimulateKeystroke(b,0) end
//            else if s='VK_DOWN' then begin b:=VK_DOWN;SimulateKeystroke(b,0) end
//            else if s='VK_LEFT' then begin b:=VK_LEFT;SimulateKeystroke(b,0) end
//            else if s='VK_RIGHT' then begin b:=VK_RIGHT;SimulateKeystroke(b,0) end
//            else Sendkeys(s);
//            s:='';
//         except
//            exit;
//         end;
end;

end.
